class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
def orientation(p, q, r):
    val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y)
    if val == 0:
        return 0
    elif val > 0:
        return 1
    else:
        return 2
def on_segment(p, q, r):
    return (q.x <= max(p.x, r.x) and q.x >= min(p.x, r.x) and
            q.y <= max(p.y, r.y) and q.y >= min(p.y, r.y))
def do_intersect(p1, q1, p2, q2):
    o1 = orientation(p1, q1, p2)
    o2 = orientation(p1, q1, q2)
    o3 = orientation(p2, q2, p1)
    o4 = orientation(p2, q2, q1)
    if o1 != o2 and o3 != o4:
        return True
    if o1 == 0 and on_segment(p1, p2, q1):
        return True
    if o2 == 0 and on_segment(p1, q2, q1):
        return True
    if o3 == 0 and on_segment(p2, p1, q2):
        return True
    if o4 == 0 and on_segment(p2, q1, q2):
        return True
    return False
def line_intersection(p1, q1, p2, q2):
    if do_intersect(p1, q1, p2, q2):
        A1 = q1.y - p1.y
        B1 = p1.x - q1.x
        C1 = A1 * p1.x + B1 * p1.y
        A2 = q2.y - p2.y
        B2 = p2.x - q2.x
        C2 = A2 * p2.x + B2 * p2.y
        determinant = A1 * B2 - A2 * B1
        if determinant == 0:
            return None  
        x = (B2 * C1 - B1 * C2) / determinant
        y = (A1 * C2 - A2 * C1) / determinant
        return Point(x, y)
    return None 
if __name__ == "__main__":
    p1 = Point(1, 1)
    q1 = Point(4, 4)
    p2 = Point(1, 4)
    q2 = Point(4, 1)
    intersection = line_intersection(p1, q1, p2, q2)
    if intersection:
        print(f"hatum: ({intersection.x}, {intersection.y})")
    else:
        print("neeeeee.")
